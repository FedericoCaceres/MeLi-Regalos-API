# source: http://localhost:8000/graphql
# timestamp: Fri Nov 20 2020 23:30:32 GMT-0300 (Argentina Standard Time)

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

type Address {
  id: ID
  street: String
  number: String
  apt: String
  description: String
  postalCode: String
  locality: String
  name: String
  contactPhone: String
  country: String
  province: String
  user: ShortUser
  status: Status
}

input AddressInput {
  id: ID
  street: String
  number: String
  apt: String
  description: String
  postalCode: String
  localityId: String
  name: String
  contactPhone: String
}

type AddressType {
  state_id: String
  state_name: String
  city_id: String
  city_name: String
}

type Attribute {
  meliId: String
  name: String
  meliValueId: String
  valueName: String
}

type Attributes {
  id: String
  name: String
  values: [ValueType]
  source: String
  value_id: String
  value_name: String
  value_struct: ValueStruct
  attribute_group_id: String
  attribute_group_name: String
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Category {
  meliId: String
  name: String
}

input CategoryInput {
  meliId: String
  name: String
}

input CreateGiftStepFourInput {
  giftId: ID!
  edit: Boolean
}

input CreateGiftStepOneInput {
  giftId: ID
  senderName: String!
  receiverName: String!
}

input CreateGiftStepThreeInput {
  giftId: ID!
  categories: [CategoryInput]
  products: [ProductKeyValue]
}

input CreateGiftStepTwoInput {
  giftId: ID!
  typeId: String!
  reasonId: String!
  maxAmount: Float!
}

type Delivery {
  id: ID
  deliveredDate: String
  deliveryAddress: Address
  statusesHistory: [StatusesHistory]
}

enum DeliveryStatus {
  ACTIVE
  INPROGRESS
  FAILED
  DONE
}

type Descriptions {
  id: String
  created: String
  plain_text: String
}

input FilterInput {
  filter: String
  value: String
}

type FilterType {
  id: String
  name: String
  type: String
  values: [ValueFilterType]
}

type FreeMethods {
  id: String
  rule: Rule
}

type Geolocation {
  latitude: String
  longitude: String
}

type Gift {
  id: ID
  userSender: ShortUser
  userReceiver: ShortUser
  createdDate: String
  reason: String
  type: String
  senderName: String
  receiverName: String
  productsChosen: ProductsChosen
  productFilter: ProductFilter
  delivery: Delivery
  payment: Payment
  status: Status
  lastUpdate: String
}

input GiftAcceptInput {
  giftId: ID!
  accept: Boolean!
  blocked: Boolean!
}

type GiftBox {
  products: [ProductsToList]
  categories: [Category]
}

input GiftBuyInput {
  giftId: String
  addressId: String
  mepaCollectionId: String
  mepaCollectionStatus: String
  mepaExternalReference: String
  mepaPaymentType: String
  mepaMerchantOrderId: String
  mepaPreferenceId: String
  mepaSiteId: String
  mepaProcessingMode: String
  mepaMerchantAccountId: String
}

input GiftInput {
  id: ID
  userSenderId: String
  userReceiverId: String
  status: StatusObjectInput
  createdDate: String
  senderName: String
  receiverName: String
  linkToken: String
}

type GiftReason {
  id: ID!
  name: String
}

input GiftSelectInput {
  giftId: ID!
  addressId: String
  products: [ProductInput]!
}

input GiftSelectProductAttributeVariationInput {
  meliId: String
  name: String
  meliValueId: String
  valueName: String
}

input GiftSelectProductInput {
  title: String
  price: Float
  meliSellerId: String
  pictures: [String]
  meliCategoryId: String
  meliProductId: String
  warranty: String
  attributes: [GiftSelectProductAttributeVariationInput!]
  variations: [GiftSelectProductAttributeVariationInput!]
}

input GiftSendGiftInput {
  id: ID!
  userSenderId: String
  senderName: String
  receiverName: String
  typeId: String
  reasonId: String
}

input GiftSendProductFilterInput {
  maxAmount: Float
  categories: [CategoryInput]
  products: [ProductKeyValue]
}

type GiftType {
  id: ID
  name: String
  description: String
}

type IdNameType {
  id: String
  name: String
}

type InstallmentsType {
  quantity: Int
  amount: Float
  rate: Float
  currency_id: String
}

type Item {
  meliId: String
  name: String
}

type Locality {
  id: ID
  name: String
}

type MeliCategory {
  meliId: String
  name: String
  picture: String
  pathRoot: [Category]
  childrenCategories: [Category]
}

type MeliProduct {
  site_id: String
  totalPages: Int
  actualPage: Int
  query: String
  paging: PagingType
  results: [ResultsType]
  sort: IdNameType
  available_sorts: [IdNameType]
  filters: [FilterType]
  available_filters: [FilterType]
}

type MeliProductDetails {
  id: String
  site_id: String
  title: String
  subtitle: String
  seller_id: String
  category_id: String
  official_store_id: String
  price: Float
  base_price: Float
  original_price: Float
  currency_id: String
  initial_quantity: Int
  sold_quantity: Int
  sale_terms: [SaleTerms]
  buying_mode: String
  listing_type_id: String
  start_time: String
  stop_time: String
  condition: String
  permalink: String
  thumbnail: String
  secure_thumbnail: String
  pictures: [Pictures]
  video_id: String
  descriptions: [Descriptions]
  accepts_mercadopago: Boolean
  shipping: Shipping
  internacional_delivery_mode: String
  seller_address: SellerAddressDetail
  geolocation: Geolocation
  attributes: [Attributes]
  tags: [String]
  warranty: String
  variations: Variations
  catalog_product_id: String
  domain_id: String
  parent_item_id: String
  differential_pricing: String
  deal_ids: [String]
  automatic_relist: Boolean
  date_created: String
  last_updated: String
  health: Float
  catalog_listing: Boolean
}

input MeliProductInput {
  site: String
  filters: [FilterInput]
  maxAmount: Float!
  page: Int
}

input MepaPaymentInput {
  giftId: ID!
  products: [ProductKeyValue]
}

type MostChosen {
  meliId: String
  name: String
  image: String
  rating: Float
}

enum MostChosenBy {
  SENDERS
  RECEIVERS
}

enum MostChosenFilter {
  CATEGORIES
  PRODUCTS
}

enum MostChosenPeriod {
  FOUR_WEEKS
  TWO_WEEKS
  ALL
}

type Mutation {
  giftAccept(input: GiftAcceptInput!): Response
  giftBuy(input: GiftBuyInput!): Response
  giftSelect(input: GiftSelectInput!): Response
  giftDiscardBySender(giftId: String!): Response
  giftDiscardByReceiver(giftId: String!): Response
  createGiftStepOne(input: CreateGiftStepOneInput): ResponseId
  createGiftStepTwo(input: CreateGiftStepTwoInput): Response
  createGiftStepThree(input: CreateGiftStepThreeInput): Response
  createGiftStepFour(input: CreateGiftStepFourInput): Response
  resetGift(giftId: String!): Response
  createOrUpdateAddress(input: AddressInput): ResponseId
  addressActive(addressId: String!): Response
  addressInactive(addressId: String!): Response
  updateUser(input: UserInput): Response
  changeStatusDelivery(input: StatusDelivery!): Response
}

type Notification {
  title: String
  body: String
  footer: String
  icon: String
}

type PagingType {
  total: Int
  offset: Int
  limit: Int
  primary_results: Int
}

type PathRooth {
  id: String
  name: String
}

type Payment {
  id: ID
  paidDate: String
  name: String
}

type Pictures {
  id: String
  url: String
  secure_url: String
  size: String
  max_size: String
  quality: String
}

type Product {
  id: ID
  title: String
  price: Float
  pictures: String
  meliCategoryId: String
}

input ProductChosenInput {
  id: ID
  giftId: String
  chosenProducts: [String]
  chosenDate: String
}

type ProductFilter {
  id: ID
  maxAmount: Float
  categories: [Item]
  products: [shortProduct]
}

input ProductFilterInput {
  giftId: String
  maxAmount: Float
  categories: [CategoryInput]
  products: [ProductKeyValue]
}

input ProductInput {
  title: String!
  price: Float!
  pictures: String!
  meliCategoryId: String!
  meliProductId: String!
}

input ProductKeyValue {
  meliId: String!
  name: String!
  price: Float!
  picture: String!
  meliCategoryId: String!
}

type ProductsChosen {
  id: ID
  products: [Product]
  chosenDate: String
}

type ProductsToList {
  meliId: String!
  name: String!
  image: String!
  price: Float!
}

type Province {
  id: ID
  name: String
}

type Query {
  getAddressById(id: ID!): Address
  getUser: User
  getGiftReasonById(id: ID): GiftReason
  getAllGiftReasons: [GiftReason]
  getGiftTypeById(id: ID): GiftType
  getAllGiftTypes: [GiftType]
  getGiftById(id: ID!): Gift
  getAllGiftStatus: [Status]
  getAllGiftsSent(fromDate: String, toDate: String, statusId: String, sort: Sort): [Gift]
  getAllGiftsReceived(fromDate: String, toDate: String, statusId: String, sort: Sort): [Gift]
  getGiftStatusesHistory(id: ID!): [StatusesHistory]
  getProductFilterById(id: ID): ProductFilter
  getGiftBox(giftId: ID!): GiftBox
  getMeliCategoryById(id: ID): MeliCategory
  getAllMeliCategories(site: String): [MeliCategory]
  getAllMeliProducts(input: MeliProductInput): MeliProduct
  getMeliProductDetailsById(id: ID): MeliProductDetails
  getPaymentUrl(input: MepaPaymentInput): String
  getMostChosen(filter: MostChosenFilter!, choosenBy: MostChosenBy!, periodActivity: MostChosenPeriod!, limit: Int): [MostChosen]
  statisticsGifts(selector: SelectorStatistics!): [StatisticsGifts]
  statisticsBudget(selector: SelectorStatistics!): [StatisticsBudget]
  statisticsBudgetAvg(selector: SelectorStatistics!): Float
  statisticsCategories(selector: SelectorStatistics!): [StatisticsCategories]
  getAllProvinces: [Province]
  getLocalitiesByProvinceId(provinceId: String!): [Locality]
}

type Response {
  success: Boolean
  message: [String]
}

type ResponseId {
  success: Boolean
  message: [String]
  id: ID
}

type ResultsType {
  id: String
  site_id: String
  title: String
  seller: SellerType
  price: Float
  currency_id: String
  available_quantity: Int
  sold_quantity: Int
  buying_mode: String
  listing_type_id: String
  stop_time: String
  condition: String
  permalink: String
  thumbnail: String
  accepts_mercadopago: Boolean
  installments: InstallmentsType
  address: AddressType
  shipping: Shipping
  seller_address: SellerAddress
  attributes: [Attributes]
  original_price: String
  category_id: String
  official_store_id: String
  catalog_product_id: String
  tags: [String]
  catalog_listing: Boolean
}

type Rule {
  default: Boolean
  free_mode: String
  free_shipping_flag: Boolean
}

type SaleTerms {
  id: String
  name: String
  value_id: String
  value_name: String
  value_struct: ValueStruct
}

type SearchLocation {
  neighborhood: IdNameType
  city: IdNameType
  state: IdNameType
}

enum SelectorStatistics {
  SENT
  RECEIVED
}

type SellerAddress {
  id: String
  comment: String
  address_line: String
  zip_code: String
  country: IdNameType
  state: IdNameType
  city: IdNameType
  latitude: String
  longitude: String
}

type SellerAddressDetail {
  city: IdNameType
  state: IdNameType
  country: IdNameType
  search_location: SearchLocation
  latitude: Float
  longitud: Float
  id: String
}

"""Secondary Childrens"""
type SellerType {
  id: String
  permalink: String
  power_seller_status: String
  car_dealer: Boolean
  real_estate_agency: Boolean
  tags: [String]
}

type Shipping {
  mode: String
  tags: [String]
  free_methods: [FreeMethods]
  dimensions: String
  free_shipping: Boolean
  local_pick_up: Boolean
  logistic_type: String
  store_pick_up: Boolean
}

type shortProduct {
  meliId: String
  name: String
  price: Float
  picture: String
  meliCategoryId: String
}

type ShortUser {
  id: ID
  name: String
  lastName: String
  avatarUrl: String
}

enum Sort {
  ASC
  DESC
}

type StatisticsBudget {
  month: String
  amount: Float
}

type StatisticsCategories {
  name: String
  amount: Int
}

type StatisticsGifts {
  month: String
  amount: Int
}

type Status {
  id: ID
  name: String
  isMain: Boolean
}

input StatusDelivery {
  giftId: String!
  status: DeliveryStatus!
}

type StatusesHistory {
  status: Status
  date: String
  user: ShortUser
}

input StatusInput {
  id: ID
  name: String
  isMain: Boolean
}

input StatusObjectInput {
  main: StatusInput
  secondary: [StatusInput]
}

type Subscription {
  giftAcceptedOrRejected(userId: String!): Notification
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  id: ID
  name: String
  lastName: String
  email: String
  phone: String
  address: [Address]
  avatarUrl: String
  giftSent: [Gift]
  giftReceived: [Gift]
  points: Int
}

input UserInput {
  id: ID
  name: String
  lastName: String
  email: String
  phone: String
  avatarUrl: String
  meliId: String
  meliNickname: String
}

type ValueFilterType {
  id: String
  name: String
  path_from_root: [PathRooth]
  results: Int
}

type ValueStruct {
  number: Float
  unit: String
}

type ValueType {
  id: String
  name: String
  struct: ValueStruct
  source: String
}

type Variations {
  id: String
  price: Float
  attribute_combinations: [Attributes]
  available_quantity: Int
  sol_quantity: Int
  sale_terms: [String]
  picture_ids: [String]
  catalog_product_id: String
}
